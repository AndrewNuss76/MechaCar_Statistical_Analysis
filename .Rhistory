numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
dcd
install.packages("tidyverse")
install.packages("tidyverse")
library(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
setwd("C:/Program Files/RStudio/R")
setwd("C:/Users/anuss/Desktop/R_Analysis")
setwd("C:/Users/anuss/Desktop/R_Analysis/01_Demo")
x <- 3
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
library(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
View(demo_table2)
View(demo_table)
#15.2.4 Slecting data from 2 dimensional data structures example
demo_table[3,"Year"]
demo_table[3,3]
#15.2.4 $ operator, selecting columns
demo_table$Vehicle_Class
#15.2.4 $ operator, selecting columns
demo_table$Vehicle_Class2
#15.2.4 $ operator, selecting columns
demo_table$Vehicle_Class[2]
#15.2.4 filter and subset a dataset
filter_table = demo_table2[demo_table2$price > 10000,]
View(filter_table)
filter_table2 = subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
View(filter_table2)
View(demo_table2)
filter_table3 = demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
View(filter_table3)
#15.2.4 Sample in R
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
#15.2.4 sampling 2 dimensional data structure
demo_table[sample(1:nrow(demo_table), 3),]
#15.2.4 sampling 2 dimensional data structure
demo_table[sample(1:nrow(demo_table), 3),]
#15.2.4 sampling 2 dimensional data structure
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
?mutate()
#15.2.5 Transform, Group, and reshape data #add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
demo_table = demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
#15.2.5 create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
View(summarize_demo)
View(summarize_demo)
?gather()
#15.2.5 continuation of reshaping data practicing # reading new dataset
demo_table3 = read.csv('demo2.csv',check.names = F, stringsAsFactors = F)
View(demo_table3)
long_table = gather(demo_table3, key = "Metric", value = "Score", buying_price:popularity)
View(long_table)
?spread()
#15.2.5 spread out long table format to original size using spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
View(long_table)
View(wide_table)
?ggplot()
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
View(plt)
> mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
#import dataset into ggplot2
> plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
#plot a bar plot
> plt + geom_col()
> mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
View(mpg_summary)
#15.3.3 adding formating
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
>theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
View(plt)
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
#15.3.5 continued
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size="City Fuel-Efficiency (MPG)") #add scatter plot with multiple aesthetics
View(mpg_summary)
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size="City Fuel-Efficiency (MPG)") #add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size="City Fuel-Efficiency (MPG)") #add scatter plot with multiple aesthetics
View(mpg)
?ggplot2()
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv,size=cty)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size="City Fuel-Efficiency (MPG)") #add scatter plot with multiple aesthetics
?geom_boxplot()
?boxplot()
plt = ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() # plot boxplot
plt = ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degress
plt = ggplot(mpg,aes(x=manufacturer,y=hwy,colours(blues9), linetype=dotted)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degress
ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot(colour ="3366FF") + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degress
plt = ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degres
plt = ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot(colour ="3366FF") + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degress
plt = ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot(fill = "white", colour ="3366FF") + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degress
plt = ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degress
plt = ggplot(mpg,aes(x=manufacturer,y=hwy,colours(=class))) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degress
plt = ggplot(mpg,aes(x=manufacturer,y=hwy,colours=class)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degress
plt = ggplot(mpg,aes(x=manufacturer,y=hwy,colour=class)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1)) #ad
plt = ggplot(mpg,aes(x=manufacturer,y=hwy,colour=class,linetype=dash)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degress
ggplot(mpg,aes(x=manufacturer,y=hwy,colour=class,linetype="dotted")) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degress
ggplot(mpg,aes(x=manufacturer,y=hwy,colour=class,linetype=dotted)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degress
plt = ggplot(mpg,aes(x=manufacturer,y=hwy,colour=class,linetype=dotted))
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1))
plt = ggplot(mpg,aes(x=manufacturer,y=hwy,colour=class,linetype="dotted"))
plt + geom_boxplot() + theme(axis.text.x = element_text(angle=45,hjust=1))
mpg_summary = mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
View(mpg_summary)
plt = ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary = mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt = ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay wi
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with
?facet_wrap()
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels #create multiple boxplots, one for each MPG type
View(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=trans)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(trans)) + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels #create multiple boxplots, one for each MPG type
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=class)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(class)) + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels #create multiple boxplots, one for each MPG type
#15.4.4 Wualitative Test for Normality _ggplot denisty
ggplot(mtcars,aes(x=wt)) + geom_density()
?shapiro.test()
#15.4.4 Qauntitative Test for Normality_shapiro testing
shapiro.test(mtcars$wt)
?sample_n()
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
View(population_table)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density()
sample_table = population_table %>% sample_n(50) #randomly sample 50 data points
plt = ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
?t.test()
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
view(mtcars)
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt)) # retrieve summary pvalue
?cor()
#15.7.1 Correlation Conundrum
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
#import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
#pearson correlation coefficient
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
?lm()
#15.7.2 Linear Regressions
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)']
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
#15.7.3 Perform multiple linear regression
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate multiple linear regression model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=cyl,y=qsec)) #import dataset into ggplot2
cor(mtcars$cyl,mtcars$qsec) #calculate correlation coefficient
plt + geom_point() #create scatter plot
summary(cor(mtcars$cyl,mtcars$qsec)) #calculate correlation coefficient
summary(cor(mtcars$cyl,mtcars$qsec))
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
cor(used_matrix)
lm(qsec ~ cyl,mtcars) #create linear model
summary(lm(qsec~cyl,mtcars)) #summarize linear model
model <- lm(qsec ~ cyl,mtcars) #create linear model
yvals <- model$coefficients['cyl']*mtcars$cyl + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=cyl,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
?chisq.test()
#15.8.1 Category Complexities
table(mpg$class,mpg$year) # generate contingency table
chisq.test(tbl) # compare categorical distributions
tbl = table(mpg$class,mpg$year)
chisq.test(tbl) # compare categorical distributions
setwd("C:/Users/anuss/Desktop/R_Analysis/MechaCar")
library(tidyverse)
MechaCar = read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
head(MechaCar)
library(dplyr)
MechaCar = read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
head(MechaCar)
View(MechaCar)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=MechaCar))
Suspension_Coild = read.csv(file = 'Suspension_Coil.csv', check.names = F,stringsAsFactors = F)
head(Suspension_Coild)
oil CSV
Suspension_Coil = read.csv(file = 'Suspension_Coil.csv', check.names = F,stringsAsFactors = F)
head(Suspension_Coil)
Suspension_Coil = read.csv(file = 'Suspension_Coil.csv', check.names = F,stringsAsFactors = F)
head(Suspension_Coil)
View(summarize_demo)
total_summary = Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI) %>% summarize(Median_PSI=median(PSI) %>% summarize(Variance_PSI=variance(PSI) %>% summarize(SD_PSI=sd(PSI), .groups = 'keep')))))
total_summary = Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI) %>% summarize(Median_PSI=median(PSI) %>% summarize(Variance_PSI=variance(PSI) %>% summarize(SD_PSI=sd(PSI), .groups = 'keep'))))))
total_summary = Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI) %>% summarize(Median_PSI=median(PSI) %>% summarize(Variance_PSI=variance(PSI) %>% summarize(SD_PSI=sd(PSI), .groups = 'keep'))))
total_summary = Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI), .groups = 'keep')
view(total_summary)
View(total_summary)
total_summary = Suspension_Coil %>% summarize(Mean_PSI=mean(PSI), .groups = 'keep')
view(total_summary)
total_summary = Suspension_Coil %>% summarize(Mean_PSI=mean(PSI) %>% summarize(Median_PSI=median(PSI)), .groups = 'keep')
lot_summary = Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI), .groups = 'keep')
view(lot_summary)
#Create summary table
total_summary = Suspension_Coil %>% summarise_all(PSI)
total_summary = Suspension_Coil %>% summarize(Mean_PSI=mean(PSI) %>% summarize(Median_PSI=median(PSI)), .groups = 'keep')
view(total_summary)
total_summary = Suspension_Coil %>% summarize(Mean_PSI=mean(PSI) %>% summarize(Median_PSI=median(PSI)), .groups = 'keep')
View(Suspension_Coil)
total_summary = Suspension_Coil %>% summarize(Mean_PSI=mean(PSI) + summarize(Median_PSI=median(PSI)), .groups = 'keep')
Create summary table
total_summary = Suspension_Coil %>% c(summarize(Mean_PSI=mean(PSI),summarize(Median_PSI=median(PSI)), .groups = 'keep'))
View(Suspension_Coil)
total_summary = Suspension_Coil %>% c(summarize(Mean_PSI=mean(Suspension_Coil$PSI)),summarize(Median_PSI=median(Suspension_Coil$PSI))), .groups = 'keep')
total_summary = Suspension_Coil %>% c(summarize(Mean_PSI=mean(Suspension_Coil$PSI)),summarize(Median_PSI=median(Suspension_Coil$PSI)))
total_summary = c(summarize(Mean_PSI=mean(Suspension_Coil$PSI)),summarize(Median_PSI=median(Suspension_Coil$PSI)))
Mean_PSI = mean(Suspension_Coil$PSI)
Median_PSI = median(Suspension_Coil$PSI)
Variance_PSI = var(Suspension_Coil$PSI)
SD_PSI = sd(Suspension_Coil$PSI)
total_summary = c(Mean_PSI, Median_PSI, Variance_PSI, SD_PSI)
view(total_summary)
total_summary = data.frame(Mean_PSI, Median_PSI, Variance_PSI, SD_PSI)
view(total_summary)
?summarize()
ry Table
lot_summary = Suspension_Coil %>% group_by(Manufacturing_Lot) %>% c(Mean_PSI, Median_PSI, Variance_PSI, SD_PSI)
view(lot_summary)
lot_summary = Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize((Mean_PSI, Median_PSI, Variance_PSI, SD_PSI), .groups = 'keep')
total_Summary = Suspension_Coil %>% summarize(Mean_PSI=mean(PSI),Median_PSI=median(PSI),Variance_PSI=var(PSI),SD_PSI=sd(PSI), .groups = 'keep')
view(total_summary)
lot_summary = Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),Median_PSI=median(PSI),Variance_PSI=var(PSI),SD_PSI=sd(PSI), .groups = 'keep')
view(lot_summary)
View(MechaCar)
t.test(log10(total_summary$Mean_PSI),mu=mean(log10(Suspension_Coil$PSI)))
t.test(log10(Suspension_Coil$PSI),mu=mean(log10(total_summary$Mean_PSI))) #compare sample versus population means
t.test(x=Suspension_Coil$PSI, mu=1500)
t.test(x=Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot =='Lot1', mu=1500)
t.test(x=Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot =='Lot1'[PSI], mu=1500)
t.test(subset(Suspension_Coil,Suspension_Coil$Manufacturing_Lot == 'Lot1'[[PSI]], mu=1500))
t.test(subset(Suspension_Coil,Suspension_Coil$Manufacturing_Lot == 'Lot1')[[PSI]], mu=1500)
t.test(subset(Suspension_Coil, Suspension_Coil$Manufacturing_Lot == 'Lot1')[[PSI]], mu=1500)
t.test(subset(Suspension_Coil, Manufacturing_Lot == 'Lot1')[['PSI']], mu=1500)
t.test(subset(Suspension_Coil, Manufacturing_Lot == 'Lot2')[['PSI']], mu=1500)
t.test(subset(Suspension_Coil, Manufacturing_Lot == 'Lot3')[['PSI']], mu=1500)
source('C:/Users/anuss/Desktop/R_Analysis/MechaCar/MechaCarChallenge.R')
